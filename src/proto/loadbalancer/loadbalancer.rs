// This file is @generated by prost-build.
///
///   ReserveLoadBalancer
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReserveLoadBalancerRequest {
    /// name of the new LB instance
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// when this reservation should end, if UNIX epoch, no expiration
    #[prost(message, optional, tag = "4")]
    pub until: ::core::option::Option<::prost_types::Timestamp>,
    /// allowed ip addresses to send, v4 or v6
    #[prost(string, repeated, tag = "5")]
    pub sender_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
///
///   GetLoadBalancer will return same as ReserveLoadBalancer but without token
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLoadBalancerRequest {
    /// database identifier
    #[prost(string, tag = "2")]
    pub lb_id: ::prost::alloc::string::String,
}
/// Reply with session token
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReserveLoadBalancerReply {
    /// instance token
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    /// database identifier, this is what to use as lbId in other gRPCs
    #[prost(string, tag = "2")]
    pub lb_id: ::prost::alloc::string::String,
    /// backend data receiving IP address
    #[prost(string, tag = "3")]
    pub sync_ip_address: ::prost::alloc::string::String,
    /// backend data receiving IP address
    #[prost(uint32, tag = "4")]
    pub sync_udp_port: u32,
    /// backend data receiving IP address
    #[prost(string, tag = "5")]
    pub data_ipv4_address: ::prost::alloc::string::String,
    /// backend data receiving IP address
    #[prost(string, tag = "6")]
    pub data_ipv6_address: ::prost::alloc::string::String,
    /// FPGA LB ID, for use in correlating logs/metrics
    #[prost(uint32, tag = "7")]
    pub fpga_lb_id: u32,
}
///
///   LoadBalancerStatus
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadBalancerStatusRequest {
    /// load balancer instance identifier
    #[prost(string, tag = "2")]
    pub lb_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkerStatus {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(float, tag = "2")]
    pub fill_percent: f32,
    #[prost(float, tag = "3")]
    pub control_signal: f32,
    #[prost(uint32, tag = "4")]
    pub slots_assigned: u32,
    /// time that this node was last updated
    #[prost(message, optional, tag = "5")]
    pub last_updated: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadBalancerStatusReply {
    /// time that this message was generated
    #[prost(message, optional, tag = "1")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// current epoch
    #[prost(uint64, tag = "2")]
    pub current_epoch: u64,
    /// Current predicted event number
    #[prost(uint64, tag = "3")]
    pub current_predicted_event_number: u64,
    #[prost(message, repeated, tag = "4")]
    pub workers: ::prost::alloc::vec::Vec<WorkerStatus>,
    #[prost(string, repeated, tag = "5")]
    pub sender_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// When this LB expires
    #[prost(message, optional, tag = "6")]
    pub expires_at: ::core::option::Option<::prost_types::Timestamp>,
}
///
/// AddSenders
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddSendersRequest {
    /// load balancer instance identifier
    #[prost(string, tag = "2")]
    pub lb_id: ::prost::alloc::string::String,
    /// sender IP addresses to add to the whitelist
    #[prost(string, repeated, tag = "3")]
    pub sender_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddSendersReply {}
///
/// RemoveSenders
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveSendersRequest {
    /// load balancer instance identifier
    #[prost(string, tag = "2")]
    pub lb_id: ::prost::alloc::string::String,
    /// sender IP addresses to delete from the whitelist
    #[prost(string, repeated, tag = "3")]
    pub sender_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveSendersReply {}
///
/// FreeLoadBalancer
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FreeLoadBalancerRequest {
    /// load balancer instance identifier
    #[prost(string, tag = "2")]
    pub lb_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FreeLoadBalancerReply {}
///
/// Register
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterRequest {
    /// load balancer instance identifier
    #[prost(string, tag = "2")]
    pub lb_id: ::prost::alloc::string::String,
    /// name of receiver
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    /// relative weight of the node for initial lb calendar
    #[prost(float, tag = "4")]
    pub weight: f32,
    /// backend data receiving IP address
    #[prost(string, tag = "5")]
    pub ip_address: ::prost::alloc::string::String,
    /// backend data receiving UDP port
    #[prost(uint32, tag = "6")]
    pub udp_port: u32,
    /// backend "entropy" or range of ports
    #[prost(enumeration = "PortRange", tag = "7")]
    pub port_range: i32,
    /// multiplied with the number of slots that would be assigned evenly to determine min number of slots
    /// for example, 4 nodes with a minFactor of 0.5 = (512 slots / 4) * 0.5 = min 64 slots
    #[prost(float, tag = "8")]
    pub min_factor: f32,
    /// multiplied with the number of slots that would be assigned evenly to determine max number of slots
    /// for example, 4 nodes with a maxFactor of 2 = (512 slots / 4) * 2 = max 256 slots
    /// set to 0 to specify no maximum
    #[prost(float, tag = "9")]
    pub max_factor: f32,
    /// if true, this receiver will receive packets with EJFAT headers intact
    #[prost(bool, tag = "10")]
    pub keep_lb_header: bool,
}
/// Reply with session token
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterReply {
    /// Ssession token
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    /// Session identifier to use in subseq uent requests
    #[prost(string, tag = "2")]
    pub session_id: ::prost::alloc::string::String,
}
///
/// Deregister
///
/// The message being sent to server when backend is deregistering
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeregisterRequest {
    /// load balancer instance identifier
    #[prost(string, tag = "2")]
    pub lb_id: ::prost::alloc::string::String,
    /// session token from RegisterReply
    #[prost(string, tag = "3")]
    pub session_id: ::prost::alloc::string::String,
}
/// DeregisterReply is intentionally blank (in case more data needed in future)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeregisterReply {}
///
/// SendState
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendStateRequest {
    /// load balancer instance identifier
    #[prost(string, tag = "3")]
    pub lb_id: ::prost::alloc::string::String,
    /// session id to update
    #[prost(string, tag = "2")]
    pub session_id: ::prost::alloc::string::String,
    /// local time when backend state determined (millisec since Epoch, 1970-01-01)
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// % of fifo entries that are filled with unprocessed data (0 to 1)
    #[prost(float, tag = "5")]
    pub fill_percent: f32,
    /// change to data rate
    #[prost(float, tag = "6")]
    pub control_signal: f32,
    /// If true, ready to accept more data, else not ready
    #[prost(bool, tag = "7")]
    pub is_ready: bool,
    /// how many event ids the receiver has seen
    #[prost(int64, tag = "8")]
    pub total_events_recv: i64,
    /// how many events has the receiver reassembled
    #[prost(int64, tag = "9")]
    pub total_events_reassembled: i64,
    /// how many events has the receiver dropped before reassembly
    #[prost(int64, tag = "10")]
    pub total_events_reassembly_err: i64,
    /// how many events popped off the queue
    #[prost(int64, tag = "11")]
    pub total_events_dequeued: i64,
    /// how many events has the receiver failed to put on the queue because it's full
    #[prost(int64, tag = "12")]
    pub total_event_enqueue_err: i64,
    /// total bytes received
    #[prost(int64, tag = "13")]
    pub total_bytes_recv: i64,
    /// total packets received
    #[prost(int64, tag = "14")]
    pub total_packets_recv: i64,
}
/// SendStateReply is intentionally blank (in case more data needed in future)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SendStateReply {}
///
/// Version
///
/// TODO: add version info from dataplane
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VersionRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VersionReply {
    #[prost(string, tag = "1")]
    pub commit: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub build: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub compat_tag: ::prost::alloc::string::String,
}
///
/// Overview
///
/// TODO: add more information about db identifiers for sessions
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OverviewRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Overview {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub reservation: ::core::option::Option<ReserveLoadBalancerReply>,
    #[prost(message, optional, tag = "4")]
    pub status: ::core::option::Option<LoadBalancerStatusReply>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OverviewReply {
    #[prost(message, repeated, tag = "1")]
    pub load_balancers: ::prost::alloc::vec::Vec<Overview>,
}
///
/// CreateToken
///
/// TODO: document some different user stories for how permissions should be delegated for a variety
/// of real-life usecases
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTokenRequest {
    /// Human readable name for the token
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub permissions: ::prost::alloc::vec::Vec<TokenPermission>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenPermission {
    #[prost(enumeration = "token_permission::ResourceType", tag = "1")]
    pub resource_type: i32,
    #[prost(string, tag = "2")]
    pub resource_id: ::prost::alloc::string::String,
    #[prost(enumeration = "token_permission::PermissionType", tag = "3")]
    pub permission: i32,
}
/// Nested message and enum types in `TokenPermission`.
pub mod token_permission {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ResourceType {
        All = 0,
        LoadBalancer = 1,
        Reservation = 2,
        Session = 3,
    }
    impl ResourceType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::All => "ALL",
                Self::LoadBalancer => "LOAD_BALANCER",
                Self::Reservation => "RESERVATION",
                Self::Session => "SESSION",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ALL" => Some(Self::All),
                "LOAD_BALANCER" => Some(Self::LoadBalancer),
                "RESERVATION" => Some(Self::Reservation),
                "SESSION" => Some(Self::Session),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum PermissionType {
        ReadOnly = 0,
        Register = 1,
        Reserve = 2,
        Update = 3,
    }
    impl PermissionType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::ReadOnly => "READ_ONLY",
                Self::Register => "REGISTER",
                Self::Reserve => "RESERVE",
                Self::Update => "UPDATE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "READ_ONLY" => Some(Self::ReadOnly),
                "REGISTER" => Some(Self::Register),
                "RESERVE" => Some(Self::Reserve),
                "UPDATE" => Some(Self::Update),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTokenReply {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenSelector {
    #[prost(oneof = "token_selector::TokenSelector", tags = "1, 2")]
    pub token_selector: ::core::option::Option<token_selector::TokenSelector>,
}
/// Nested message and enum types in `TokenSelector`.
pub mod token_selector {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum TokenSelector {
        /// if zero, target the token in the request itself
        #[prost(uint32, tag = "1")]
        Id(u32),
        #[prost(string, tag = "2")]
        Token(::prost::alloc::string::String),
    }
}
///
/// ListTokenPermissions
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTokenPermissionsRequest {
    #[prost(message, optional, tag = "1")]
    pub target: ::core::option::Option<TokenSelector>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenDetails {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub permissions: ::prost::alloc::vec::Vec<TokenPermission>,
    #[prost(string, tag = "3")]
    pub created_at: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTokenPermissionsReply {
    #[prost(message, optional, tag = "1")]
    pub token: ::core::option::Option<TokenDetails>,
}
///
/// ListChildTokens
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListChildTokensRequest {
    #[prost(message, optional, tag = "1")]
    pub target: ::core::option::Option<TokenSelector>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListChildTokensReply {
    #[prost(message, repeated, tag = "1")]
    pub tokens: ::prost::alloc::vec::Vec<TokenDetails>,
}
///
/// RevokeToken
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevokeTokenRequest {
    #[prost(message, optional, tag = "1")]
    pub target: ::core::option::Option<TokenSelector>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RevokeTokenReply {}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PortRange {
    PortRange1 = 0,
    PortRange2 = 1,
    PortRange4 = 2,
    PortRange8 = 3,
    PortRange16 = 4,
    PortRange32 = 5,
    PortRange64 = 6,
    PortRange128 = 7,
    PortRange256 = 8,
    PortRange512 = 9,
    PortRange1024 = 10,
    PortRange2048 = 11,
    PortRange4096 = 12,
    PortRange8192 = 13,
    PortRange16384 = 14,
}
impl PortRange {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PortRange1 => "PORT_RANGE_1",
            Self::PortRange2 => "PORT_RANGE_2",
            Self::PortRange4 => "PORT_RANGE_4",
            Self::PortRange8 => "PORT_RANGE_8",
            Self::PortRange16 => "PORT_RANGE_16",
            Self::PortRange32 => "PORT_RANGE_32",
            Self::PortRange64 => "PORT_RANGE_64",
            Self::PortRange128 => "PORT_RANGE_128",
            Self::PortRange256 => "PORT_RANGE_256",
            Self::PortRange512 => "PORT_RANGE_512",
            Self::PortRange1024 => "PORT_RANGE_1024",
            Self::PortRange2048 => "PORT_RANGE_2048",
            Self::PortRange4096 => "PORT_RANGE_4096",
            Self::PortRange8192 => "PORT_RANGE_8192",
            Self::PortRange16384 => "PORT_RANGE_16384",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PORT_RANGE_1" => Some(Self::PortRange1),
            "PORT_RANGE_2" => Some(Self::PortRange2),
            "PORT_RANGE_4" => Some(Self::PortRange4),
            "PORT_RANGE_8" => Some(Self::PortRange8),
            "PORT_RANGE_16" => Some(Self::PortRange16),
            "PORT_RANGE_32" => Some(Self::PortRange32),
            "PORT_RANGE_64" => Some(Self::PortRange64),
            "PORT_RANGE_128" => Some(Self::PortRange128),
            "PORT_RANGE_256" => Some(Self::PortRange256),
            "PORT_RANGE_512" => Some(Self::PortRange512),
            "PORT_RANGE_1024" => Some(Self::PortRange1024),
            "PORT_RANGE_2048" => Some(Self::PortRange2048),
            "PORT_RANGE_4096" => Some(Self::PortRange4096),
            "PORT_RANGE_8192" => Some(Self::PortRange8192),
            "PORT_RANGE_16384" => Some(Self::PortRange16384),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod load_balancer_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// The backend state reporting service definition.
    #[derive(Debug, Clone)]
    pub struct LoadBalancerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl LoadBalancerClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> LoadBalancerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> LoadBalancerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            LoadBalancerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Reserves a new load balancer
        pub async fn reserve_load_balancer(
            &mut self,
            request: impl tonic::IntoRequest<super::ReserveLoadBalancerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReserveLoadBalancerReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/ReserveLoadBalancer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("loadbalancer.LoadBalancer", "ReserveLoadBalancer"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Retrieves the reservation details of a load balancer
        pub async fn get_load_balancer(
            &mut self,
            request: impl tonic::IntoRequest<super::GetLoadBalancerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReserveLoadBalancerReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/GetLoadBalancer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("loadbalancer.LoadBalancer", "GetLoadBalancer"));
            self.inner.unary(req, path, codec).await
        }
        /// Retrieves the current state of an LB
        pub async fn load_balancer_status(
            &mut self,
            request: impl tonic::IntoRequest<super::LoadBalancerStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LoadBalancerStatusReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/LoadBalancerStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("loadbalancer.LoadBalancer", "LoadBalancerStatus"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Sends a backend's state to server
        pub async fn free_load_balancer(
            &mut self,
            request: impl tonic::IntoRequest<super::FreeLoadBalancerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FreeLoadBalancerReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/FreeLoadBalancer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("loadbalancer.LoadBalancer", "FreeLoadBalancer"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Update a sender address for a load balancer
        pub async fn add_senders(
            &mut self,
            request: impl tonic::IntoRequest<super::AddSendersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddSendersReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/AddSenders",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("loadbalancer.LoadBalancer", "AddSenders"));
            self.inner.unary(req, path, codec).await
        }
        /// Delete a sender address from a load balancer
        pub async fn remove_senders(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveSendersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveSendersReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/RemoveSenders",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("loadbalancer.LoadBalancer", "RemoveSenders"));
            self.inner.unary(req, path, codec).await
        }
        /// Sends a backend's registration request to server
        pub async fn register(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterRequest>,
        ) -> std::result::Result<tonic::Response<super::RegisterReply>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/Register",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("loadbalancer.LoadBalancer", "Register"));
            self.inner.unary(req, path, codec).await
        }
        /// Sends a backend's request to unregister to server
        pub async fn deregister(
            &mut self,
            request: impl tonic::IntoRequest<super::DeregisterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeregisterReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/Deregister",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("loadbalancer.LoadBalancer", "Deregister"));
            self.inner.unary(req, path, codec).await
        }
        /// Sends a backend's state to server
        pub async fn send_state(
            &mut self,
            request: impl tonic::IntoRequest<super::SendStateRequest>,
        ) -> std::result::Result<tonic::Response<super::SendStateReply>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/SendState",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("loadbalancer.LoadBalancer", "SendState"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the name, LoadBalancerStatus data, and GetLoadBalancer data for all LBs
        pub async fn overview(
            &mut self,
            request: impl tonic::IntoRequest<super::OverviewRequest>,
        ) -> std::result::Result<tonic::Response<super::OverviewReply>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/Overview",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("loadbalancer.LoadBalancer", "Overview"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the version of the current LB.
        pub async fn version(
            &mut self,
            request: impl tonic::IntoRequest<super::VersionRequest>,
        ) -> std::result::Result<tonic::Response<super::VersionReply>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/Version",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("loadbalancer.LoadBalancer", "Version"));
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new token with specified permissions
        pub async fn create_token(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateTokenReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/CreateToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("loadbalancer.LoadBalancer", "CreateToken"));
            self.inner.unary(req, path, codec).await
        }
        /// Lists all permissions for a token
        pub async fn list_token_permissions(
            &mut self,
            request: impl tonic::IntoRequest<super::ListTokenPermissionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListTokenPermissionsReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/ListTokenPermissions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("loadbalancer.LoadBalancer", "ListTokenPermissions"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists all child tokens created by this token
        pub async fn list_child_tokens(
            &mut self,
            request: impl tonic::IntoRequest<super::ListChildTokensRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListChildTokensReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/ListChildTokens",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("loadbalancer.LoadBalancer", "ListChildTokens"));
            self.inner.unary(req, path, codec).await
        }
        /// Revokes a token and all its children
        pub async fn revoke_token(
            &mut self,
            request: impl tonic::IntoRequest<super::RevokeTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RevokeTokenReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/loadbalancer.LoadBalancer/RevokeToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("loadbalancer.LoadBalancer", "RevokeToken"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod load_balancer_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with LoadBalancerServer.
    #[async_trait]
    pub trait LoadBalancer: std::marker::Send + std::marker::Sync + 'static {
        /// Reserves a new load balancer
        async fn reserve_load_balancer(
            &self,
            request: tonic::Request<super::ReserveLoadBalancerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReserveLoadBalancerReply>,
            tonic::Status,
        >;
        /// Retrieves the reservation details of a load balancer
        async fn get_load_balancer(
            &self,
            request: tonic::Request<super::GetLoadBalancerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReserveLoadBalancerReply>,
            tonic::Status,
        >;
        /// Retrieves the current state of an LB
        async fn load_balancer_status(
            &self,
            request: tonic::Request<super::LoadBalancerStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LoadBalancerStatusReply>,
            tonic::Status,
        >;
        /// Sends a backend's state to server
        async fn free_load_balancer(
            &self,
            request: tonic::Request<super::FreeLoadBalancerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FreeLoadBalancerReply>,
            tonic::Status,
        >;
        /// Update a sender address for a load balancer
        async fn add_senders(
            &self,
            request: tonic::Request<super::AddSendersRequest>,
        ) -> std::result::Result<tonic::Response<super::AddSendersReply>, tonic::Status>;
        /// Delete a sender address from a load balancer
        async fn remove_senders(
            &self,
            request: tonic::Request<super::RemoveSendersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveSendersReply>,
            tonic::Status,
        >;
        /// Sends a backend's registration request to server
        async fn register(
            &self,
            request: tonic::Request<super::RegisterRequest>,
        ) -> std::result::Result<tonic::Response<super::RegisterReply>, tonic::Status>;
        /// Sends a backend's request to unregister to server
        async fn deregister(
            &self,
            request: tonic::Request<super::DeregisterRequest>,
        ) -> std::result::Result<tonic::Response<super::DeregisterReply>, tonic::Status>;
        /// Sends a backend's state to server
        async fn send_state(
            &self,
            request: tonic::Request<super::SendStateRequest>,
        ) -> std::result::Result<tonic::Response<super::SendStateReply>, tonic::Status>;
        /// Returns the name, LoadBalancerStatus data, and GetLoadBalancer data for all LBs
        async fn overview(
            &self,
            request: tonic::Request<super::OverviewRequest>,
        ) -> std::result::Result<tonic::Response<super::OverviewReply>, tonic::Status>;
        /// Returns the version of the current LB.
        async fn version(
            &self,
            request: tonic::Request<super::VersionRequest>,
        ) -> std::result::Result<tonic::Response<super::VersionReply>, tonic::Status>;
        /// Creates a new token with specified permissions
        async fn create_token(
            &self,
            request: tonic::Request<super::CreateTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateTokenReply>,
            tonic::Status,
        >;
        /// Lists all permissions for a token
        async fn list_token_permissions(
            &self,
            request: tonic::Request<super::ListTokenPermissionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListTokenPermissionsReply>,
            tonic::Status,
        >;
        /// Lists all child tokens created by this token
        async fn list_child_tokens(
            &self,
            request: tonic::Request<super::ListChildTokensRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListChildTokensReply>,
            tonic::Status,
        >;
        /// Revokes a token and all its children
        async fn revoke_token(
            &self,
            request: tonic::Request<super::RevokeTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RevokeTokenReply>,
            tonic::Status,
        >;
    }
    /// The backend state reporting service definition.
    #[derive(Debug)]
    pub struct LoadBalancerServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> LoadBalancerServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for LoadBalancerServer<T>
    where
        T: LoadBalancer,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/loadbalancer.LoadBalancer/ReserveLoadBalancer" => {
                    #[allow(non_camel_case_types)]
                    struct ReserveLoadBalancerSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::ReserveLoadBalancerRequest>
                    for ReserveLoadBalancerSvc<T> {
                        type Response = super::ReserveLoadBalancerReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReserveLoadBalancerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::reserve_load_balancer(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReserveLoadBalancerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/GetLoadBalancer" => {
                    #[allow(non_camel_case_types)]
                    struct GetLoadBalancerSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::GetLoadBalancerRequest>
                    for GetLoadBalancerSvc<T> {
                        type Response = super::ReserveLoadBalancerReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetLoadBalancerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::get_load_balancer(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetLoadBalancerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/LoadBalancerStatus" => {
                    #[allow(non_camel_case_types)]
                    struct LoadBalancerStatusSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::LoadBalancerStatusRequest>
                    for LoadBalancerStatusSvc<T> {
                        type Response = super::LoadBalancerStatusReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LoadBalancerStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::load_balancer_status(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LoadBalancerStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/FreeLoadBalancer" => {
                    #[allow(non_camel_case_types)]
                    struct FreeLoadBalancerSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::FreeLoadBalancerRequest>
                    for FreeLoadBalancerSvc<T> {
                        type Response = super::FreeLoadBalancerReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FreeLoadBalancerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::free_load_balancer(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FreeLoadBalancerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/AddSenders" => {
                    #[allow(non_camel_case_types)]
                    struct AddSendersSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::AddSendersRequest>
                    for AddSendersSvc<T> {
                        type Response = super::AddSendersReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddSendersRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::add_senders(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddSendersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/RemoveSenders" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveSendersSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::RemoveSendersRequest>
                    for RemoveSendersSvc<T> {
                        type Response = super::RemoveSendersReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveSendersRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::remove_senders(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveSendersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/Register" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::RegisterRequest>
                    for RegisterSvc<T> {
                        type Response = super::RegisterReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::register(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/Deregister" => {
                    #[allow(non_camel_case_types)]
                    struct DeregisterSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::DeregisterRequest>
                    for DeregisterSvc<T> {
                        type Response = super::DeregisterReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeregisterRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::deregister(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeregisterSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/SendState" => {
                    #[allow(non_camel_case_types)]
                    struct SendStateSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::SendStateRequest>
                    for SendStateSvc<T> {
                        type Response = super::SendStateReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SendStateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::send_state(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendStateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/Overview" => {
                    #[allow(non_camel_case_types)]
                    struct OverviewSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::OverviewRequest>
                    for OverviewSvc<T> {
                        type Response = super::OverviewReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OverviewRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::overview(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = OverviewSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/Version" => {
                    #[allow(non_camel_case_types)]
                    struct VersionSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::VersionRequest>
                    for VersionSvc<T> {
                        type Response = super::VersionReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VersionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::version(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = VersionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/CreateToken" => {
                    #[allow(non_camel_case_types)]
                    struct CreateTokenSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::CreateTokenRequest>
                    for CreateTokenSvc<T> {
                        type Response = super::CreateTokenReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::create_token(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/ListTokenPermissions" => {
                    #[allow(non_camel_case_types)]
                    struct ListTokenPermissionsSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::ListTokenPermissionsRequest>
                    for ListTokenPermissionsSvc<T> {
                        type Response = super::ListTokenPermissionsReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListTokenPermissionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::list_token_permissions(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListTokenPermissionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/ListChildTokens" => {
                    #[allow(non_camel_case_types)]
                    struct ListChildTokensSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::ListChildTokensRequest>
                    for ListChildTokensSvc<T> {
                        type Response = super::ListChildTokensReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListChildTokensRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::list_child_tokens(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListChildTokensSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/loadbalancer.LoadBalancer/RevokeToken" => {
                    #[allow(non_camel_case_types)]
                    struct RevokeTokenSvc<T: LoadBalancer>(pub Arc<T>);
                    impl<
                        T: LoadBalancer,
                    > tonic::server::UnaryService<super::RevokeTokenRequest>
                    for RevokeTokenSvc<T> {
                        type Response = super::RevokeTokenReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RevokeTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as LoadBalancer>::revoke_token(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RevokeTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for LoadBalancerServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "loadbalancer.LoadBalancer";
    impl<T> tonic::server::NamedService for LoadBalancerServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
